#include <iostream>
#include <vector>
#include <limits>

using namespace std;

//exterior angle is always 360

void print_board(const vector<vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row) {
            cout << cell << "|";
        }
        cout << endl;
    }
    cout << endl;
}

char check_winner(const vector<vector<char>>& board) {
    // Check rows
    for (const auto& row : board) {
        if (row[0] != ' ' && row[0] == row[1] && row[1] == row[2]) {
            return row[0];
        }
    }

    // Check columns
    for (int col = 0; col < 3; ++col) {
        if (board[0][col] != ' ' && board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
            return board[0][col];
        }
    }

    // Check diagonals
    if (board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
        return board[0][0];
    }
    if (board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
        return board[0][2];
    }

    // Check for a draw
    for (const auto& row : board) {
        for (char cell : row) {
            if (cell == ' ') {
                return ' ';
            }
        }
    }

    return 'D'; // Draw
}

vector<pair<int, int>> get_empty_cells(const vector<vector<char>>& board) {
    vector<pair<int, int>> empty_cells;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == ' ') {
                empty_cells.emplace_back(i, j);
            }
        }
    }
    return empty_cells;
}

pair<int, pair<int, int>> minimax(vector<vector<char>>& board, int depth, bool is_maximizing) {
    char winner = check_winner(board);
    if (winner != ' ') {
        if (winner == 'O') {
            return {10 - depth, {-1, -1}};
        } else if (winner == 'X') {
            return {-10 + depth, {-1, -1}};
        } else {
            return {0, {-1, -1}};
        }
    }

    if (is_maximizing) {
        int best_score = numeric_limits<int>::min();
        pair<int, int> best_move = {-1, -1};
        for (const auto& move : get_empty_cells(board)) {
            int row = move.first;
            int col = move.second;
            board[row][col] = 'O';
            auto [score, _] = minimax(board, depth + 1, false);
            board[row][col] = ' ';
            if (score > best_score) {
                best_score = score;
                best_move = move;
            }
        }
        return {best_score, best_move};
    } else {
        int best_score = numeric_limits<int>::max();
        pair<int, int> best_move = {-1, -1};
        for (const auto& move : get_empty_cells(board)) {
            int row = move.first;
            int col = move.second;
            board[row][col] = 'X';
            auto [score, _] = minimax(board, depth + 1, true);
            board[row][col] = ' ';
            if (score < best_score) {
                best_score = score;
                best_move = move;
            }
        }
        return {best_score, best_move};
    }
}

void play_game() {
    vector<vector<char>> board(3, vector<char>(3, ' '));
    print_board(board);
    while (true) {
        int row, col;
        cout << "Enter your move (row, col): ";
        cin >> row >> col;
        if (board[row][col] == ' ') {
            board[row][col] = 'X';
        } else {
            cout << "Invalid move. Try again." << endl;
            continue;
        }

        print_board(board);
        char winner = check_winner(board);
        if (winner != ' ') {
            if (winner == 'X') {
                cout << "You win!" << endl;
            } else if (winner == 'O') {
                cout << "AI wins!" << endl;
            } else {
                cout << "It's a draw!" << endl;
            }
            break;
        }

        auto [_, ai_move] = minimax(board, 0, true);
        board[ai_move.first][ai_move.second] = 'O';
        cout << "AI's move: " << ai_move.first << ", " << ai_move.second << endl;
        print_board(board);
        winner = check_winner(board);
        if (winner != ' ') {
            if (winner == 'X') {
                cout << "You win!" << endl;
            } else if (winner == 'O') {
                cout << "AI wins!" << endl;
            } else {
                cout << "It's a draw!" << endl;
            }
            break;
        }
    }
}

int main() {
    play_game();
    return 0;
}
